{
    "collab_server" : "",
    "contents" : "---\nlayout: page\noutput:\n  knitrBootstrap::bootstrap_document:\n    title: \"Using the Google Chart Tools with R\"\n    theme.chooser: TRUE\n    highlight.chooser: TRUE\n---\n\n<!--\n%\\VignetteEngine{knitr::rmarkdown}\n%\\VignetteIndexEntry{Using the Google Chart Tools with R}\n-->\n\n\nUsing the Google Chart Tools with R\n========================================================\n**Markus Gesmann and Diego de Castillo**\n\n```{r bib, echo=FALSE, message=FALSE}\nlibrary(googleVis)\noptions(gvis.plot.tag=\"chart\")\nlibrary(knitcitations)\nbib <- read.bibtex(\"googleVis.bib\")\nbib <- lapply(bib, \n              function(x) {\n                x$title <- gsub(\"\\\\}\",\"\", gsub(\"\\\\{\", \"\", x$title));x\n                })\n```\n\n\n# Overview\n\nThe googleVis package provides an interface between R and the\nGoogle Chart Tools.  The Google Chart Tools offer interactive\ncharts which can be embedded into web pages. The best \nknown of these charts is probably the Motion Chart, popularised \nby Hans Rosling in his TED talks. \n \nThe functions of the googleVis package allow the user to visualise\ndata stored in R data frames with the Google Chart Tools\nwithout uploading the data to Google. The output of a `googleVis`\nfunction is html code that contains the data and references to\nJavaScript functions hosted by Google.\n  \ngoogleVis makes use of the internal R HTTP server to display the\noutput locally. A modern browser with an Internet connection is\nrequired and for some charts Flash.\n\n# Introduction\n\n## Motivation\n\nMore and more data is becoming available, and yet\nstories and insights are still often missed: we are lost in the data\njungle and struggle to see the wood for the trees. \n\nHence, new tools are required to bring data to life, to engage with\nusers, to enable them to slice and dice the data, to view it from\nvarious angles and to find stories worth telling: outliers, trends or\neven the obvious. \n\nIn 2006 Hans Rosling gave an inspiring talk at\nTED `r citep(bib[\"HansRoslingTedTalk\"])` about social and economic developments\nin the world over the past 50 years, which challenged the views and\nperceptions of many listeners. Rosling had used extensive data analysis\nto reach his conclusions.  To visualise his talk, he and his team at\nGapminder `r citep(bib[\"Gapminder\"])` had developed animated bubble charts, aka\nmotion charts. \n\nRosling's presentation popularised the idea and use of interactive\ncharts. One year later the software behind\nGapminder was bought by Google and integrated as motion charts into\ntheir Google Chart Tools `r citep(bib[\"GoogleVisApi\"])`, formerly known as Google\nVisualisation API.  \n\nIn 2010 Sebastian Perez Saaibi `r citep(bib[\"Saaibi2010\"])` presented at the \nR/Rmetrics Workshop on  Computational Finance and Financial\nEngineering, the idea to use Google motion charts to visualise R\noutput with the R.rsp package `r citep(bib[\"Rsp\"])`. \n\nInspired by those talks and the desire to use interactive data\nvisualisation tools to foster the dialogue between data analysts and\nothers the authors of this vignette started the development of the\n`googleVis` package `r citep(bib[\"googleVis\"])`,\n`r citep(bib[\"RJournal:2011-2:GesmannCastillo\"])` in August 2010. \n\n![Overview of a Google Motion Chart](./figures/MotionChart.png)\n\n*Overview of a Google Motion Chart.  Screenshot of the output of\n`plot(gvisMotionChart(Fruits, idvar='Fruit', timevar='Year'))`*\n\n## Google Chart Tools\n\nThe Google Chart Tools `r citep(bib[\"GoogleVisApi\"])`\nallow users to create interactive charts as part of Google\ndocuments, spreadsheets and web pages. In this text we will focus \non the usage of the API as part of web pages.\n\nThe Google Public Data Explorer `r citep(bib[\"GooglePublicData\"])` provides a\ngood example, demonstrating the use of interactive charts and how they can\nhelp to analyse data. Please note, that all of those charts are\nrendered by the browser.\n\nThe charting data can either be embedded into the html file or read\ndynamically. The key to the Google Chart Tools is that the data is\nstructured in a DataTable `r citep(bib[\"DataTable\"])`, and this is \nwhere the googleVis\npackage helps, as it transforms R data frames into JSON `r citep(bib[\"json\"])`\nobjects, using the `RJSONIO` package `r citep(bib[\"RJSONIO\"])`, as\nthe basis for a DataTable. \n\nAs an example we shall look at the html-code of a motion chart from\nGoogle's visualisation gallery `r citep(bib[\"GoogleMotionChart\"])`, which\ngenerates output similar to figure below.\n\n```\n 1 <html>\n 2  <head>\n 3   <script type=\"text/javascript\" \n 4     src=\"http://www.google.com/jsapi\">\n 5   </script>\n 6   <script type=\"text/javascript\">\n 7     google.load('visualization', '1', \n 8      {'packages':['motionchart']});\n 9    google.setOnLoadCallback(drawChart);\n10    function drawChart() {\n11    var data=new google.visualization.DataTable();\n12    data.addColumn('string', 'Fruit');\n13    data.addColumn('date', 'Date');\n14    data.addColumn('number', 'Sales');\n15    data.addColumn('number', 'Expenses');\n16    data.addColumn('string', 'Location');\n17    data.addRows([\n18    ['Apples',new Date(1988,0,1),1000,300,'East'],\n19    ['Oranges',new Date(1988,0,1),1150,200,'West'],\n20    ['Bananas',new Date(1988,0,1),300,250,'West'],\n21    ['Apples',new Date(1989,6,1),1200,400,'East'],\n22    ['Oranges',new Date(1989,6,1),750,150,'West'],\n23    ['Bananas',new Date(1989,6,1),788,617,'West']\n24    ]);\n25    var chart=new google.visualization.MotionChart(\n26      document.getElementById('chart_div'));\n27    chart.draw(data, {width: 600, height:300});\n28   }\n29   </script>\n30  </head>\n31  <body>\n32   <div id=\"chart_div\" \n33        style=\"width:600px; height:300px;\">\n34   </div>\n35  </body>\n36 </html>\n```\nThe code and data are processed and rendered by the browser and is\nnot submitted to any [server](https://google-developers.appspot.com/chart/interactive/docs/gallery/motionchart.html#Data_Policy). \n\nYou will notice that the above html code has five generic\nparts:\n\n1. references to Google's AJAX (l. 4) and Visualisation\n  API (ll. 7 -- 8),\n2. data to visualise as a `DataTable` (ll. 11 -- 24),\n3. an instance call to create the chart (ll. 25 -- 26),\n4. a method call to draw the chart including options, shown\n  here as width and height (l. 27),\n5. an HTML `<div>` element to add the chart to the page (ll.\n  32 -- 34).\n  \nThese principles hold true for most of the interactive charts of the\nGoogle Chart Tools, see the examples in Figure below.\n\nHowever, before you use the API you should read the \n[Google Terms of Service](https://developers.google.com/terms/). \n\n\n# The googleVis package\n\nThe googleVis package provides an interface between R and the Google\nChart Tools.  The functions of the package allow the user to\nvisualise data stored in R data frames with the Google Chart Tools.\n\nVersion `r packageDescription(\"googleVis\")[['Version']]` of the package\nprovides interfaces to  Motion Charts, Annotated Time Lines, \nMaps, Geo Maps, Geo Charts, Intensity Maps, Tables, Gauges, \nTree Maps, further Line, Bar, Bubble, Column, Area, Stepped Area, \nCombo, Scatter, Candlestick, Pie, Sankey, Annotation, \nHistogram, Timeline, Calendar and Org Charts. \n\nExecute `demo(googleVis)` to see examples of the charts.\n\nThe output of a googleVis function is html code that contains the\ndata and references to JavaScript functions hosted by Google. A\nbrowser with an Internet connection is required to view\nthe output, and for Motion Charts, Geo Maps and Annotated Time Lines\nalso Flash. \n\n![Screen shot](./figures/googleVisDemoPlots.png)\n\n*Screenshot of some of the outputs of `demo(googleVis)`. Clockwise from top left:  `gvisMotionChart, gvisAnnotatedTimeLine, gvisGeoMap, gvisTreeMap, gvisTablez` and `gvisMap`.*\n\n## Installation\n\nYou can install googleVis in the usual way from CRAN, e.g.:\n```{r, eval=FALSE}\ninstall.packages('googleVis') \n```\nThe installation was successful if the\ncommand `library(googleVis)` gives you the following message:\n```{r, eval=FALSE}\nlibrary(googleVis)\n```\n```{r,echo=FALSE}\ncat(googleVis:::gvisWelcomeMessage())\n```\n\n\n\n## Using the googleVis package\n\nThe individual functions of the googleVis package are documented in\nthe help pages. Here we will cover only the principles of\nthe package.\n\nAs an example we will show how to generate a motion chart as displayed in   \nfigure below. It works similarly for the other\nAPIs. Further examples are covered in the demos\nof the googleVis package.\n\nThe design of the visualisation functions is fairly generic. The name\nof the visualisation function is `'gvis' + ChartType`. So for\nthe Motion Chart we have: \n```\ngvisMotionChart(data, idvar='id', timevar='date', \n                options=list(), chartid)\n```\nHere `data` is the input `data.frame` and `idvar`\nand `timevar` specify the column names of the id variable and\ntime variable for the plot, while display options are set in an\noptional list, which we discuss in more detail on\npage settingoptions. The options and data requirements\nfollow those of the Google Chart Tools and are documented in the\nhelp pages, see \n```\nhelp('gvisMotionChart')\n```\n\n![Schematic](./figures/gvisObject.png)\n\n*Schematic structure of a gvis list object.*\n\nThe argument `chartid` allows the user to set a chart id of the\noutput chart manually. If the argument is missing a random id using \n`tempfile(pattern=\\textquotesingle\\textquotesingle)`\nwill be generated. Unique chart ids are required to place more than\none chart on a web page. \n\nThe output of a googleVis function is a list of lists (a nested list)\ncontaining information about the chart type, chart id and the html\ncode in a  sub-list with header, chart, caption and footer, see figure above\n\nThe idea behind this concept is that users can get a\ncomplete web page, while at the same time offer a facility to extract \nspecific parts, such as the chart itself. \nThis is particularly helpful if the package functions\nare used in solutions where the user wants to feed the visualisation\noutput into other sites, or would like to embed them into rsp-pages,  \nuse `rApache` or Google Gadgets.  \n\nThe output of a googleVis function will be of class `'gvis'`\nand `'list'`. Generic print (`print.gvis`)  and plot\n(`plot.gvis`) functions exist to ease the handling of such objects. \n\nTo illustrate the concept we shall create a motion chart using the\n`Fruits` data set. \n\n\n## Motion Chart Example\n\nFollowing the documentation of the Google Motion Chart API we need a\ndata set which has at least four columns: one identifying the\nvariable we would like to plot, one time variable and at least two\nnumerical variables, further numerical and character columns are allowed.\n\nAs an example we use the `Fruits` data set:\n\n```{r Fruits}\ndata(Fruits)\nFruits\n```\n\nHere we will use the columns `Fruit` and\n`'Year'` as id and time variable respectively. However we could\nhave used `'Date'` instead of `'Year'` as well. \n\n\n```{r motionchartfruits, results='asis'}\n M <- gvisMotionChart(Fruits, idvar=\"Fruit\", timevar=\"Year\")\nplot(M)\n```\n\n## World Bank Example\n\n<iframe src=\"http://mages.github.io/googleVis/WorldBank.html\"\n frameborder=\"0\" width=\"700px\" height=\"650px\">Loading</iframe>\n```{r WorldBank, eval=FALSE, tidy=FALSE}\nlibrary(googleVis)\nlibrary(WDI)\ninds <- c('SP.DYN.TFRT.IN','SP.DYN.LE00.IN', 'SP.POP.TOTL',\n          'NY.GDP.PCAP.CD', 'SE.ADT.1524.LT.FE.ZS')\nindnams <- c(\"fertility.rate\", \"life.expectancy\", \"population\",\n             \"GDP.per.capita.Current.USD\", \"15.to.25.yr.female.literacy\")\nwdiData <- WDI(country=\"all\", indicator=inds,\n               start=1960, end=format(Sys.Date(), \"%Y\"), extra=TRUE)\ncolnum <- match(inds, names(wdiData))\n \nnames(wdiData)[colnum] <- indnams\n## Create a motion chart\nlibrary(googleVis)\nWorldBank <- droplevels(subset(wdiData, !region %in% \"Aggregates\"))\nM <- gvisMotionChart(WorldBank,\n                     idvar=\"country\", timevar=\"year\",\n                     xvar=\"life.expectancy\", yvar=\"fertility.rate\",\n                     colorvar=\"region\", sizevar=\"population\",\n                     options=list(width=550, height=500), chartid=\"WorldBank\")\n## Display the chart in the browser\nplot(M)\n```\n\n\n\n# References\n\n```{r bibliography, results='asis', echo=FALSE}\nbibliography(bulleted=FALSE)\n```\n",
    "created" : 1469096650996.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3195240189",
    "id" : "D4B990E1",
    "lastKnownWriteTime" : 1422055122,
    "last_content_update" : 1422055122,
    "path" : "~/Downloads/googleVis/vignettes/Ideas/googleVis.Rmd",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}